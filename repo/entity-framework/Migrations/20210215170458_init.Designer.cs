// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApi.Repository.EntityFramework.Context;

namespace PortfolioApi.Repository.EntityFramework.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20210215170458_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Portfolio")
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortfolioApi.Models.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 416, DateTimeKind.Utc).AddTicks(5627));

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 416, DateTimeKind.Utc).AddTicks(5311));

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PortfolioApi.Models.Experiences.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 427, DateTimeKind.Utc).AddTicks(7379));

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 427, DateTimeKind.Utc).AddTicks(6826));

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("Type");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("PortfolioApi.Models.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 414, DateTimeKind.Utc).AddTicks(5963));

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 2, 15, 17, 4, 58, 413, DateTimeKind.Utc).AddTicks(4702));

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PortfolioApi.Models.Contacts.Contact", b =>
                {
                    b.OwnsOne("PortfolioApi.Models.Contacts.ContactInfo", "Info", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int?>("AddressType")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("PhoneType")
                                .HasColumnType("int");

                            b1.Property<string>("Postal")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContactId");

                            b1.HasIndex("Email");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.Experiences.Experience", b =>
                {
                    b.OwnsOne("PortfolioApi.Models.Experiences.ExperienceInfo", "Info", b1 =>
                        {
                            b1.Property<int>("ExperienceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("BackgroundUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ExperienceId");

                            b1.HasIndex("Title");

                            b1.ToTable("Experiences");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId");

                            b1.OwnsMany("PortfolioApi.Models.Experiences.Sections.ExperienceSection", "Sections", b2 =>
                                {
                                    b2.Property<int>("ExperienceInfoExperienceId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<DateTime?>("AddDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime?>("UpdateDate")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("ExperienceInfoExperienceId", "Id");

                                    b2.ToTable("ExperienceSection");

                                    b2.WithOwner()
                                        .HasForeignKey("ExperienceInfoExperienceId");

                                    b2.OwnsOne("PortfolioApi.Models.Experiences.Sections.ExperienceSectionInfo", "Info", b3 =>
                                        {
                                            b3.Property<int>("ExperienceSectionExperienceInfoExperienceId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ExperienceSectionId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("Body")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Meta")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ExperienceSectionExperienceInfoExperienceId", "ExperienceSectionId");

                                            b3.ToTable("ExperienceSection");

                                            b3.WithOwner()
                                                .HasForeignKey("ExperienceSectionExperienceInfoExperienceId", "ExperienceSectionId");
                                        });
                                });
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.Profiles.Profile", b =>
                {
                    b.OwnsOne("PortfolioApi.Models.Profiles.ProfileInfo", "Info", b1 =>
                        {
                            b1.Property<int>("ProfileId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AboutMe")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("BirthDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ProfileId");

                            b1.HasIndex("LastName", "FirstName");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
